MICRO
c    BRA  BIN CON I1  I2  I3   A    B   DD      MAR
c    ACC=aaaa, PC=pppp, X=rrrr  
m00 00000 000 000 111 000 011 0000 0011 00 0 1 1 1 0 1 0 1 1 1	// Bootstrap
m01 00000 000 000 000 000 001 0000 0000 00 0 0 1 0 0 0 0 0 0 0

m02 00000 000 000 101 000 011 0011 0011 01 0 1 1 1 0 1 1 1 1 0  >> PC++  ## Begin of : LDA $K, X
m03 00000 000 000 101 000 001 0110 0000 00 0 0 1 1 0 1 1 1 0 1  >> MDR + X -> MAR
m04 00000 000 000 111 000 011 0000 0001 00 0 1 1 0 0 1 1 1 0 1  >> MDR + 0 -> ACC
m05 00000 000 000 101 000 011 0011 0011 01 0 1 1 1 0 1 1 1 1 0  >> PC++
m06 00000 000 000 000 000 001 0000 0000 00 0 0 1 0 0 0 0 0 0 0  >> Next(PC)  ## End of : LDA $K, X

m07 00000 000 000 101 000 011 0011 0011 01 0 1 1 1 0 1 1 1 1 0  >> PC++  ## Begin of : LDX #K 
m08 00000 000 000 111 000 011 0000 0110 00 0 1 1 0 0 1 1 1 0 1  >> MDR + 0 -> X 
m09 00000 000 000 101 000 011 0011 0011 01 0 1 1 1 0 1 1 1 1 0  >> PC++
m0a 00000 000 000 000 000 001 0000 0000 00 0 0 1 0 0 0 0 0 0 0  >> Next(PC)  ## End of : LDX #K

m0b 00000 000 000 101 000 011 0110 0110 01 0 1 1 1 0 1 1 1 1 0  >> X++  ## Begin of : INX
m0c 00000 000 000 101 000 011 0011 0011 01 0 1 1 1 0 1 1 1 1 0  >> PC++ 
m0d 00000 000 000 000 000 001 0000 0000 00 0 0 1 0 0 0 0 0 0 0  >> Next(PC) ## End of : INX

m0e 00000 000 000 101 000 011 0011 0011 01 0 1 1 1 0 1 1 1 1 0  >> PC++  ## Begin of : CMPX #Y
m0f 00000 000 000 101 001 001 0110 1100 00 0 1 1 0 1 1 1 1 0 1  >> X - #Y -> NOP, MSTATUSCLK
m10 00000 000 000 101 000 011 0011 0011 01 0 1 1 1 0 1 1 1 1 0  >> PC++
m11 00000 000 000 000 000 001 0000 0000 00 0 0 1 0 0 0 0 0 0 0  >> Next(PC) ## End of : CMPX #Y

m12 00000 000 000 101 000 011 0011 0011 01 1 1 1 1 0 1 1 1 1 0  >> PC++  ## Begin of : STA $K, X
m13 00000 000 000 101 000 001 0110 0000 00 1 1 1 1 0 1 1 1 0 1  >> MDR + X -> MAR,NOP
m14 00000 000 000 100 000 001 0001 0000 00 1 1 0 0 0 1 1 1 1 1  >> ACC + 0 -> MDR
m15 00000 000 000 101 000 011 0011 0011 01 1 1 1 1 0 1 1 1 1 0  >> PC++
m16 00000 000 000 001 000 001 0000 0000 00 0 1 1 0 0 0 1 1 1 1  >> Next(PC)  ## End of : STA $K, X

m17 00000 000 000 101 000 011 0011 0011 01 1 1 1 1 0 1 1 1 1 0  >> PC++  ## Begin of : ADC $K, X
m18 00000 000 000 101 000 001 0110 0000 00 0 0 1 1 0 1 1 1 0 1  >> MDR + X -> MAR
m19 00000 000 000 101 000 011 0001 0001 00 0 1 1 0 1 1 1 0 0 1  >> MDR + ACC -> ACC, MSTATUSCLK + CARRYE~
m1a 00000 000 000 101 000 011 0011 0011 01 1 1 1 1 0 1 1 1 1 0  >> PC++
m1b 00000 000 000 001 000 001 0000 0000 00 0 1 1 0 0 0 1 1 1 1  >> Next(PC)  ## End of : ADC $K, X

m1c 00000 000 000 111 000 001 0000 0000 01 0 1 1 0 1 1 1 1 1 0  >> DD + Z --> 0 + 1  ## Begin of : CRC
m1d 00000 000 000 101 000 011 0011 0011 01 1 1 1 1 0 1 1 1 1 0  >> PC++
m1e 00000 000 000 001 000 001 0000 0000 00 0 1 1 0 0 0 1 1 1 1  >> Next(PC)  ## End of : CRC

m1f 00011 101 011 101 000 011 0011 0011 01 1 1 1 1 0 1 1 1 1 0  >> PC++ && if Z==1 JMP + 3 ## Begin of : BRNZ $K 
m20 00000 000 000 111 000 011 0000 0011 00 1 1 1 1 0 1 1 1 0 1  >> $K + 0 -> PC
m21 00000 000 000 001 000 001 0000 0000 00 0 1 1 0 0 0 1 1 1 1  >> Next(PC)
m22 00000 000 000 101 000 011 0011 0011 01 1 1 1 1 0 1 1 1 1 0 	>> PC++
m23 00000 000 000 001 000 001 0000 0000 00 0 1 1 0 0 0 1 1 1 1  >> Next(PC) ## End of : BRNZ $K

m24 00000 000 000 100 000 111 0001 0001 00 0 1 1 0 0 1 1 1 1 1  >> Shift ## Begin of : SHLA -> SHLA enable ~SH && SELB !!! feedback register
m25 00000 000 000 101 000 011 0011 0011 01 1 1 1 1 0 1 1 1 1 0  >> PC++
m26 00000 000 000 001 000 001 0000 0000 00 0 1 1 0 0 0 1 1 1 1  >> Next(PC)

m27 00000 000 000 100 000 011 0011 0011 00 0 0 1 0 0 1 1 1 1 1  >> PC + 0 -> PC ## HALT
m28 00000 000 000 001 000 001 0000 0000 00 0 1 1 0 0 0 1 1 1 1  >> Next(PC)
c m20 00011 011 011 000 000 001 0000 0000 00 1 0 1 0 0 1 1 1 1 1  >> If Z==0 JMP + 3

MAPPER 
m00 02 >> LDA $K,X 
m01 07 >> LDX #K 
m02 0b >> INX
m03 0e >> CMPX #Y
m04 12 >> STA $K,X
m05 17 >> ADC $K,X
m06 1c >> CRC
m07 1f >> BRNZ $K
m08 24 >> SHLA 
m09 27 >> HALT

MAIN
m00 01 >> opcode LDX
m01 00 >> $K operand LDX
m02 06 >> opcode CRC
m03 00 >> opcode LDA $K, X
m04 20 >> operand LDA
m05 08 >> opcode SHLA
m06 06 >> opcode CRC
m07 05 >> opcode ADC $K, X
m08 30 >> operand ADC
m09 04 >> opcode STA $K, X
m0a 40 >> operand STA
m0b 02 >> opcode INX
m0c 03 >> opcode CMPX #Y
m0d 08 >> operand CMPX --> Y = limit
m0e 07 >> opcode BRNZ $K
m0f 03 >> operand BRNZ 
m10 09 >> opcode HALT

c Table Segment Z
m20 01
m21 03
m22 02
m23 03
m24 02
m25 03
m26 02
m27 03

c Table Segment Y
m30 02
m31 01
m32 01
m33 02
m34 01
m35 02
m36 01
m37 02

c Results Table W
m40 00
m41 00
m42 00
m43 00
m44 00
m45 00
m46 00
m47 00